#!/usr/bin/python3
#!/usr/bin/python3
#==============================================================================
 #   Assignment:  Milestone 2
 #
 #       Author:  Inna Zhogova 
 #    StudentID:  116683160
 #     Language:  Python
 #   To Compile:  n/a
 #
 #        Class:  Python for Programmers: Sockets and Security (DPI912) 
 #    Professor:  Harvey Kaduri
 #     Due Date:  Friday, February 14, 5pm
 #    Submitted:  Friday, February 14, 8pm
 #
 #-----------------------------------------------------------------------------
 #
 #  Description:  This program consist of 2 files: a client and a server. Server waits for client's connection, then generates ticket numbers based on the paramenters supplied
 #                by the client and sends the ticket numbers in response. The arguments in the client are arbitrarily generated per each request.
 #
 #        Input:  There are no required inputs but there are 2 optional ones: -r number of clients running and -c for number of connections per client.
 #
 #       Output:  The program creates files with ticket numbers in /tmp directory. Files names are arbitrarily generated by the client.
 #
 #    Algorithm:  n/a.
 #
 #   Required Features Not Included:  n/a.
 #
 #   Known Bugs:  n/a.
 #
 #   Classification: n/a.
 #
#==============================================================================
import argparse
import random
import socket
import os

def main():
    sockets = []
    
    #Define and parse command line arguments
    parser  = argparse.ArgumentParser(description="This program allows you to play the following lotteries: 649, Lottario, LottoMAX")
    parser.add_argument('-c', type=int, default=1, help="Maximum number of connections per client", required=False)
    parser.add_argument('-r', type=int, default=1, help="Maximum clients running", required=False)

    cmdargs = parser.parse_args()
    maxClients = cmdargs.r
    maxConnections = cmdargs.c

    pickedNumbersList=[]

    print("Please, put in the socket number:")
    socketnum = int(input())
    print("Please, input the IP address:")
    ipaddr = input()
    print("The results will be ready in your /tmp folder!")
    for clientNumber in range(maxClients):
        try:
            pid = os.fork()
        except OSError:
            sys.stderr.write("Couldn't create a child process\n")
            continue

        if pid == 0:
            #print(f"New client child: {os.getpid()}")
            for connectionNumber in range(maxConnections):
                #for each connection generate arbitrary data
                numberTickets = random.randint(0,50)
                lotteryName = random.choice(["649", "lottomax", "lottario"])
                fileName = "user#" + str(random.randint(0, 1000000))

                #package the arbitrarily generated data
                data = f'{lotteryName},{numberTickets}'

                #connect to the server
                socketObject = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
                socketObject.connect((ipaddr, socketnum))
                socketObject.sendall(data.encode())

                #get server-generated numbers
                ticketNumbers = socketObject.recv(10240)
                decodedTicketNums = ticketNumbers.decode()

                #separate tickets and get rid of the empty element at the end of the list
                ticketByTicket = decodedTicketNums.split(';')
                del ticketByTicket[len(ticketByTicket)-1]

                #create a file with unique id in tmp directory
                f = open("/tmp/" + fileName + ".txt", "a")
                f.write("Your " + lotteryName + " numbers!\n\n")

                #parse the received string data and write it out to the file
                for ticket in ticketByTicket:
                    t=ticket.split('.')
                    f.write(t[0]+'\n')
                    if lotteryName!="649":
                        numsets = t[1].split(':')
                        for i in range(len(numsets)):
                            f.write(str(i+1) + " number set: " + numsets[i] + '\n')
                        f.write('\n')
                    else: f.write(t[1]+'\n')
                f.close()
                socketObject.close()
            os._exit(0)

if __name__=="__main__":
    main()        
        

    
